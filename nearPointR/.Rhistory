library(devtools)
use_r("current_location")
load_all()
current_location("OpenStreetMap")
current_location("EsriWorldImagery")
current_location("OpenTopoMap")
current_location("OpenTopoMa")
exists("current_location", where = globalenv(), inherits = FALSE)
check()
use_mit_license()
document()
?current_location
check()
export(current_location)
document()
check()
check()
check()
use_package("httr")
use_package("jsonlite")
use_package("leaflet")
check()
?current_location
check()
check()
check()
check()
load_all()
check()
ls("httr")
ls(httr)
help(package = "httr")
help(package = "leaflet")
help(package = "jsonlite")
help(package = "leaflet")
check()
check()
check()
help(package = "httr")
check()
check()
help(package = "jsonlite")
check()
check()
?current_location
check()
check()
?current_location
check()
current_location("OpenStreetMap")
current_location("OpenTopoMap")
current_location("EsriWorldImagery")
check()
check()
install()
library(nearPointR)
current_location("OpenTopoMap")
use_testthat()
use_test("current_location")
?current_location
current_location("OpenTopoMap")
test()
use_readme_rmd()
check()
install()
library(nearPointR)
current_location("OpenTopoMap")
?current_location
install.packages("C:/Users/Prasa/Downloads/RAtmoGraphs_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(RAtmoGraphs)
help(package="RAtmoGraphs")
get_weather_data("temperature")
get_weather_data("humidity")
get_weather_data("wind speed")
library(devtools)
use_r("nearest_locations")
load_all()
load_all()
nearest_locations("catering.cafe","OpenStreetMap")
nearest_locations("healthcare.pharmacy","EsriWorldImagery")
check()
document()
check()
check()
check()
help(package = "leaflet")
check()
install()
use_test("nearest_locations")
?nearest_locations
test()
check()
install()
use_r("show_list")
load_all()
library(nearPointR)
show_list("catering.cafe")
show_list("healthcare.pharmacy")
check()
document()
?show_list
check()
install()
library(nearPointR)
show_list("healthcare.pharmacy")
nearest_locations("healthcare.pharmacy","EsriWorldImagery")
show_list("healthcare.pharmacy")
install()
check()
?show_list
?show_list
?nearest_locations
check()
library(devtools)
loadall()
install()
library(nearPointR)
current_location("OpenTopoMap")
nearest_locations("healthcare.pharmacy","EsriWorldImagery")
show_list("healthcare.pharmacy")
check()
use_test("show_list")
test()
check()
use_r("navigate_to_closest")
load_all()
navigate_to_closest("catering.cafe")
check()
document()
?navigate_to_closest
check()
document()
check()
help(package = "utils")
document()
check()
install()
library(nearPointR)
navigate_to_closest("healthcare.pharmacy")
use_test("navigate_to_closest")
test()
library(devtools)
install()
navigate_to_closest("healthcare.pharmacy")
show_list("healthcare.pharmacy")
library(nearPointR)
navigate_to_closest("healthcare.pharmacy")
show_list("healthcare.pharmacy")
test()
check()
install()
check()
check()
check()
check()
document()
install()
library(nearPointR)
show_list("healthcare.pharmacy")
library(nearPointR)
current_location("OpenTopoMap")
nearest_locations("healthcare.pharmacy","EsriWorldImagery")
show_list("catering.cafe")
navigate_to_closest("catering.cafe")
use_package("utils")
library(devtools)
use_package("utils")
check()
library(httr)
check()
use_r("download_list")
load_all()
download_list("healthcare.pharmacy","csv")
download_list("healthcare.pharmacy","geojson")
download_list("healthcare.pharmacy","kml")
check()
document()
?download_list
check()
use_package("sf")
check()
check()
check()
install()
use_test("download_list")
test()
check()
check()
install()
install.packages("C:/Users/Prasa/Downloads/RAtmoGraphs_0.0.0.9000 (1).tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Prasa/Downloads/RAtmoGraphs_0.0.0.9000 (1).tar.gz", repos = NULL, type = "source")
library(devtools)
use_vignette("Intro_to_nearPointR", title = "Introduction to R Package 'nearPointR'")
remove.packages("nearPointR")
library(RAtmoGraphs)
detach("package:RAtmoGraphs", unload = TRUE)
remove.packages("RAtmoGraphs")
library(nearPointR)
install.packages("C:/Users/Prasa/Desktop/WWU-Münster/SPATIAL DATA SCIENCE WITH R SOSE 2023, EDZER PEBESMA/ASSIGNMENT-R PACKAGE/nearPointR_0.0.0.01.tar.gz", repos = NULL, type = "source")
library(nearPointR)
library(nearPointR)
basemap <- "OpenStreetMap"
current_location(basemap)
category <- "healthcare.pharmacy"
basemap <- "EsriWorldImagery"
nearest_locations(category,basemap)
basemap <- "OpenStreetMap"
current_location(basemap)
category <- "healthcare.pharmacy"
show_list(category)
category <- "healthcare.pharmacy"
basemap <- "EsriWorldImagery"
nearest_locations(category,basemap)
category <- "healthcare.pharmacy"
navigate_to_closest(category)
category <- "healthcare.hospital"
navigate_to_closest(category)
category <- "healthcare.pharmacy"
output_format <- "kml"
download_list(category,output_format)
detach("package:nearPointR", unload = TRUE)
remove.packages("nearPointR")
install.packages("C:/Users/Prasa/Desktop/WWU-Münster/SPATIAL DATA SCIENCE WITH R SOSE 2023, EDZER PEBESMA/ASSIGNMENT-R PACKAGE/nearPointR_0.0.0.01.tar.gz", repos = NULL, type = "source")
library(nearPointR)
help(package="nearPointR")
remove.packages("nearPointR")
install.packages("C:/Users/Prasa/Desktop/WWU-Münster/SPATIAL DATA SCIENCE WITH R SOSE 2023, EDZER PEBESMA/ASSIGNMENT-R PACKAGE/nearPointR_0.0.0.01.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Prasa/Desktop/WWU-Münster/SPATIAL DATA SCIENCE WITH R SOSE 2023, EDZER PEBESMA/ASSIGNMENT-R PACKAGE/nearPointR_0.0.0.01.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Prasa/Desktop/WWU-Münster/SPATIAL DATA SCIENCE WITH R SOSE 2023, EDZER PEBESMA/ASSIGNMENT-R PACKAGE/nearPointR_0.0.0.01.tar.gz", repos = NULL, type = "source")
remove.packages("nearPointR")
install.packages("C:/Users/Prasa/Desktop/WWU-Münster/SPATIAL DATA SCIENCE WITH R SOSE 2023, EDZER PEBESMA/ASSIGNMENT-R PACKAGE/nearPointR_0.0.0.01.tar.gz", repos = NULL, type = "source")
library(nearPointR)
category <- "accommodation.hotel"
longitude <- 7.6009394 # computer obtain this from Google location API
latitude <- 51.956711 # computer obtain this from Google location API
api_url <- paste0("https://api.geoapify.com/v2/places?categories=",
category,
"&filter=circle:",
longitude,",",
latitude,
",5000&bias=proximity:",
longitude,",",
latitude,
"&lang=en&limit=50&apiKey=8656aac75f1b4bfeae112f0a0df5c685"
)
category <- "accommodation.hotel"
longitude <- 7.6009394 # computer obtain this from Google location API
latitude <- 51.956711 # computer obtain this from Google location API
api_url <- paste0("https://api.geoapify.com/v2/places?categories=",
category,
"&filter=circle:",
longitude,",",
latitude,
",5000&bias=proximity:",
longitude,",",
latitude,
"&lang=en&limit=50&apiKey=8656aac75f1b4bfeae112f0a0df5c685"
)
print(api_url)
category <- "accommodation.hotel"
longitude <- 7.6009394 # computer obtain this from Google location API
latitude <- 51.956711 # computer obtain this from Google location API
api_url <- paste0("https://api.geoapify.com/v2/places?categories=",
category,
"&filter=circle:",
longitude,",",
latitude,
",5000&bias=proximity:",
longitude,",",
latitude,
"&lang=en&limit=50&apiKey=YOURKEY"
)
print(api_url)
category <- "accommodation.hotel"
longitude <- 7.6009394 # When executing computer obtain this from Google location API
latitude <- 51.956711 # When executing computer obtain this from Google location API
api_url <- paste0("https://api.geoapify.com/v2/places?categories=",
category,
"&filter=circle:",
longitude,",",
latitude,
",5000&bias=proximity:",
longitude,",",
latitude,
"&lang=en&limit=50&apiKey=YOURKEY"
)
print(api_url)
category <- "accommodation.hotel"
longitude <- 7.6009394 # When executing computer obtain this from Google location API
latitude <- 51.956711 # When executing computer obtain this from Google location API
api_url <- paste0("https://api.geoapify.com/v2/places?categories=",
category,
"&filter=circle:",
longitude,",",
latitude,
",5000&bias=proximity:",
longitude,",",
latitude,
"&lang=en&limit=50&apiKey=YOURAPIKEY"
)
print(api_url)
category <- "accommodation.hotel"
longitude <- 7.6009394 # When executing computer obtain this from Google location API
latitude <- 51.956711 # When executing computer obtain this from Google location API
api_url <- paste0("https://api.geoapify.com/v2/places?categories=",
category,
"&filter=circle:",
longitude,",",
latitude,
",5000&bias=proximity:",
longitude,",",
latitude,
"&lang=en&limit=50&apiKey=YOUR API KEY"
)
print(api_url)
library(nearPointR)
basemap <- "OpenStreetMap"
current_location(basemap)
basemap <- "EsriWorldImagery"
current_location(basemap)
category <- "healthcare.pharmacy"
basemap <- "EsriWorldImagery"
nearest_locations(category,basemap)
category <- "healthcare.hospital"
basemap <- "OpenStreetMap"
nearest_locations(category,basemap)
category <- "healthcare.hospital"
navigate_to_closest(category)
category <- "commercial.supermarket"
show_list(category)
check()
library(devtools)
check()
remove.packages("nearPointR")
install.packages("C:/Users/Prasa/Desktop/WWU-Münster/SPATIAL DATA SCIENCE WITH R SOSE 2023, EDZER PEBESMA/ASSIGNMENT-R PACKAGE/nearPointR_0.0.0.01.tar.gz", repos = NULL, type = "source")
library(nearPointR)
remove.packages("nearPointR")
install.packages("C:/Users/Prasa/Desktop/WWU-Münster/SPATIAL DATA SCIENCE WITH R SOSE 2023, EDZER PEBESMA/ASSIGNMENT-R PACKAGE/nearPointR_0.0.0.01.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Prasa/Desktop/WWU-Münster/SPATIAL DATA SCIENCE WITH R SOSE 2023, EDZER PEBESMA/ASSIGNMENT-R PACKAGE/nearPointR_0.0.0.01.tar.gz", repos = NULL, type = "source")
library(nearPointR)
basemap <- "OpenStreetMap"
current_location(basemap)
library(devtools)
check()
install.packages("C:/Users/Prasa/Downloads/RAtmoGraphs_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(RAtmoGraphs)
get_weather_data("temparature")
get_weather_data("temperature")
get_weather_data("humidity")
get_weather_data("wind speed")
map_humidity_data()
map_tempurature_data()
map_windspeed_data()
